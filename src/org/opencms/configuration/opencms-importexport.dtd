<!-- 
# The root configuration node is called <opencms> for all OpenCms configurations.
-->
<!ELEMENT opencms (importexport, staticexport, usercsvexport?, repositories?, extendedhtmlimport?)>

<!--
# <importexport> configuration:
#
# In this node the import and export options are configured.
# If you are installing a fresh OpenCms system without migrating
# content from old OpenCms versions, you usually do not need any special 
# configuration. 
-->
<!ELEMENT importexport (
	importexporthandlers, 
	import,
	export? )>

<!--
# List of import / export handlers.
# When content is imported, the manifest.xml is analyzed and the 
# appropriate handler for the import format is selected. 
-->
<!ELEMENT importexporthandlers (importexporthandler+)>
<!ELEMENT importexporthandler EMPTY>
<!ATTLIST importexporthandler class CDATA #REQUIRED>

<!-- 
# <import> node options.
# There are several options to ensure backward compatibility.
-->
<!ELEMENT import (
	overwrite?, 
	convert?, 
	oldwebappurl?, 
	importversions+, 
	immutables*, 
	principaltranslations*, 
	ignoredproperties*)>

<!--
# If this flag is set to "false" then imports > v2 (that should have resource UUIDs
# in the manifest) will move colliding resources to /system/lost-found/. Otherwise
# colliding resources will be overwritten. v1 and v2 imports (without resource 
# UUIDs in the manifest) are forced to overwrite colliding  resources, no matter 
# how this flag is set.
-->
<!ELEMENT overwrite (#PCDATA)>

<!--
# This flag controls if editabled content of older versions is automatically
# conterted to the current version upon import. For example, content of type 
# "page" from 5.0 is converted into "xmlpage" in 6.0.
-->
<!ELEMENT convert (#PCDATA)>

<!--
# Convert file content from 4.x to 5.x style during import
# This is needed for the correct content conversion of the import.
# Enter the URL of the OpenCms web application from which the content was exported,
# e.g. http://localhost:8080/opencms/opencms/ for a standard local Tomcat installation.
-->
<!ELEMENT oldwebappurl (#PCDATA)>

<!--
# List of import class names. 
# This is only required if you must import OpenCms content created with older OpenCms 
# versions. The format of the export has changed with new 
# OpenCms versions being released. Each export file has a "stamp" in the 
# manifest.xml that signals which export version of OpenCms was used.
# In order to import resources from older installations, you must enabled
# the corrospondig classes in this configuration node.
-->
<!ELEMENT importversions (importversion+)>
<!ELEMENT importversion EMPTY>
<!ATTLIST importversion class CDATA #REQUIRED>

<!--
# Import immutable resources:
# Certain system resources should usually not be changed and be "immutable" 
# during an import. This is especially true for the main folders in the /system/ 
# directory as locking and changing these will take very long during the import.
# Changes to these folders usually happen only accidentally and so should not be imported
# to another system.
-->
<!ELEMENT immutables (resource*)>
<!ELEMENT resource EMPTY>
<!ATTLIST resource uri CDATA #REQUIRED>

<!--
# Import principal (ie. user/group) name translation:
# In case the user names in the import differ from the user names configured 
# in the importing system, you can use this feature to translate the names from the 
# import to other names in your system.
-->
<!ELEMENT principaltranslations (principaltranslation*)>
<!ELEMENT principaltranslation EMPTY>
<!ATTLIST principaltranslation type (USER|user|GROUP|group) #REQUIRED from CDATA #REQUIRED to CDATA #REQUIRED>

<!--
# List of properties which are ignored (ie. not imported) when resources are imported. 
-->
<!ELEMENT ignoredproperties (property*)>
<!ELEMENT property EMPTY>
<!ATTLIST property name CDATA #REQUIRED>

<!-- 
# <export> node options.
# Options that influence how resources are exported, 
# in particular which information are written to the manifest.xml.
-->
<!ELEMENT export (defaulttimestampmodes?)>

<!--
# Define default timestamp modes for resourcetypes. The default types are stronger than
# the value of the property export.timestamp.
# Example (set default timestamp mode for resourcetype "jsp" to "importtime" :
# <defaulttimestampmodes>
#	<timestampmode mode="importtime">
#		<resourcetypename>jsp</resourcetypename>
#	</timestampmode>
# </defaulttimestampmodes>
-->
<!ELEMENT defaulttimestampmodes (timestampmode+)>

<!ELEMENT timestampmode (resourcetypename+)>
<!ATTLIST timestampmode mode (importtime|IMPORTTIME|filetime|FILETIME|vfstime|VFSTIME) #REQUIRED>

<!ELEMENT resourcetypename (#PCDATA)>

<!--
# <staticexport> Configuration:
#
# Settings for the static export. 
# The attribute "enabled" controls if the static export is enabled,
# if it is set to "false" nothing is ever exported, if set to "true" 
# it works according the the selected <mode> setting.
-->
<!ELEMENT staticexport (
	staticexporthandler, 
	linksubstitutionhandler?,
	exportpath,
	exportworkpath?,
	exportbackups?,
	defaultpropertyvalue,
	defaultsuffixes?,
	exportheaders?,
	requestheaders?,
	rendersettings)>
<!ATTLIST staticexport enabled (TRUE|true|FALSE|false) #REQUIRED>

<!--
# The fully qualified class name of a concrete implementation of the 
# org.opencms.staticexport.I_CmsStaticExportHandler interface.
# The default handler is "CmsOnDemandStaticExportHandler",
# which is most suitable for dynamic sites that use the static export 
# as optimization for non-dynamic content. 
# Another handler is the "CmsAfterPublishStaticExportHandler",
# which exports all changes immediately after something is published.
#
# The following implementations are shipped with the default OpenCms 
# core distribution:
#    org.opencms.staticexport.CmsOnDemandStaticExportHandler             
#         selects export "on demand" mode
#    org.opencms.staticexport.CmsAfterPublishStaticExportHandler
#         selects export "after publish" mode
-->
<!ELEMENT staticexporthandler (#PCDATA)>

<!--
# The fully qualified class name of a concrete implementation of the 
# org.opencms.staticexport.I_CmsLinkSubstitutionHandler interface.
# The default handler is "CmsDefaultLinkSubstitutionHandler".
-->
<!ELEMENT linksubstitutionhandler (#PCDATA)>

<!--
# The path in the "real" FS to write the static exported pages to.
# This is relative to the web application root path.
-->	
<!ELEMENT exportpath (#PCDATA)>

<!--
# The path in the "real" FS to write the static exported pages to
# during the full static export is working.
# This is relative to the web application root path.
-->	
<!ELEMENT exportworkpath (#PCDATA)>

<!--
# The number of backup folders in the real "FS".
-->	
<!ELEMENT exportbackups (#PCDATA)>

<!--
# The default value of the "export" property for resources where searching for
# the property value of the resource returns "null".
-->
<!ELEMENT defaultpropertyvalue (#PCDATA)>

<!--
# A list of suffixes where the export property default is "true", 
# even if the default property value (see above) is "false".
-->
<!ELEMENT defaultsuffixes (suffix+)>

<!ELEMENT suffix EMPTY>
<!ATTLIST suffix key CDATA #REQUIRED>

<!--
# A list of http headers which can be used when exporting plain resources (e.g. binary 
# files like pdf).
-->
<!ELEMENT exportheaders (header+)>

<!ELEMENT header (#PCDATA)>

<!--
# A list of http headers are used while sending the internal requests during the static export. 
# If none of those headers are defined, the default settings (language and encoding) of OpenCms are used.
-->
<!ELEMENT requestheaders (acceptlanguage?, acceptcharset?, remoteaddr?)>

<!ELEMENT acceptlanguage (#PCDATA)>
<!ELEMENT acceptcharset (#PCDATA)>
<!ELEMENT remoteaddr (#PCDATA)>


<!--
# The render settings control how template based resources are written to 
# (i.e. "rendered") the "real" FS. 
-->
<!ELEMENT rendersettings (
	rfs-prefix,
	vfs-prefix,
	userelativelinks,
	exporturl, 
	plainoptimization, 
	testresource, 
	resourcestorender,
    rfs-rules?)>

<!--
# The rfs prefix is used to adjust the links to
# resources that have been written to the "real" file system.
# Usually, a dynmaic resource has the web application and servlet names
# in the path to the link, e.g. "/opencms/opencms". If a resource is static exported,
# it is not longer delivered through the OpenCms servlet and thus thus path needs 
# to be adjusted.
#
# This node supports variable replacement since the values can depend on the configuration:
# 
# ${EXPORT_PATH}		is replaced with the value of the <exportpath> node, e.g. "export"
# ${CONTEXT_NAME}		is replaced with the name of the webapp context, e.g. "opencms"
# ${SERVLET_NAME}		is replaces with the name of the OpenCms servlet, e.g. "opencms"
-->
<!ELEMENT rfs-prefix (#PCDATA)>

<!--
# The vfs prefix is used to adjust the links to
# resources that are still served dynamically by OpenCms.
# Usually this is something like "/opencms/opencms".
# However, in some advanced setups that also use static export 
# (e.g. if you use Apache httpd and mod_proxy)
# this prefix needs to be adjusted.
#
# This node supports the same variables as the <rfs-prefix> node.
-->
<!ELEMENT vfs-prefix (#PCDATA)>

<!--
# Controls if the links in the static exported pages should be written as 
# absolute or relative links.
-->
<!ELEMENT userelativelinks (#PCDATA)>

<!--
# Setting for "after-publish" or "full-static-render" mode:
# The url given here is internally called to export template resources,
# i.e. a http request to this machine is done to generate them.
# Usually this should be a request to the server itself, i.e. localhost.
#
# This node supports the same variables as the <rfs-prefix> node.
-->
<!ELEMENT exporturl (#PCDATA)>

<!--
# Setting for "after-publish" mode:
# Usually a complete dependency check is made after publish for all template
# resources. If this is set to "true" (the default), this check is skipped
# if only on-template resources (i.e. images, plain text files) where published. 
# If you have build a navigation that also depends on these files, you must 
# set this to "false" or the navigation might not be updated.
-->
<!ELEMENT plainoptimization (#PCDATA)>

<!ELEMENT testresource EMPTY>
<!ATTLIST testresource uri CDATA #REQUIRED>

<!--
# A list of resources in the vfs that are rendered in "after-publish" mode,
# or if a full static export is done. This is a list of regular expressions.
# Only resources that match one of the given regular expressions are rendered.
# The intention is to speed up the dependency check by excluding folders 
# like "/system".
-->
<!ELEMENT resourcestorender (regex+, export-rules?)>

<!--
# This set of resources is always rendered.
-->
<!ELEMENT regex (#PCDATA)>

<!--
# A list of export rules.
# Each rule defines how to export a set of resources defined by regular expresions.
# Additionally all resourcestorender/regex entries are rendered.
-->
<!ELEMENT export-rules (export-rule+)>

<!--
# A single export rule that defines a set of resources to be exported (<export>),
# if something has been changed in the other set of resources (<modified>).
-->
<!ELEMENT export-rule (name, description, modified-resources, export-resources)>

<!--
# A list of regular expressions defining a set of resources.
-->
<!ELEMENT modified-resources (regex+)>

<!--
# A list of URIs (folders or files) defining a set of resources to export,
# if a file in <modified> has been changed.
-->
<!ELEMENT export-resources (uri+)>

<!--
# A OpenCms URI (folder or file).
-->
<!ELEMENT uri (#PCDATA)>

<!--
# A list of rfs-rules definitions used to adjust the links to
# resources that are written to the "real" file system.
# the association is resource-based, every resource can have its own rfs-rule.
-->
<!ELEMENT rfs-rules (rfs-rule+)>

<!--
# A rfs-prefix definition for a single site.
-->
<!ELEMENT rfs-rule (
	name, 
	description, 
	source, 
	rfs-prefix, 
	exportpath, 
	exportworkpath?, 
	exportbackups?, 
	userelativelinks?, 
	related-system-res)>

<!--
# the source resources to be configured by a rfs-rule.
-->
<!ELEMENT source (#PCDATA)>

<!--
# a name for a rule.
-->
<!ELEMENT name (#PCDATA)>

<!--
# a description text of a rule.
-->
<!ELEMENT description (#PCDATA)>

<!--
# A list of regular expression that should define the related system resources, this related system resources will
# also be written to the "real" file system.
-->
<!ELEMENT related-system-res (regex*)>

<!--
# In this node the import and export values for the im- / export of user data are configured.
-->
<!ELEMENT usercsvexport (
	separator,
	columns)>

<!--
# The separator used in the im- / export csv file.
-->
<!ELEMENT separator (#PCDATA)>

<!--
# List of values how data is ordered inside the import list or 
# what user data will be exported and this data is ordered inside the export file.
-->
<!ELEMENT columns (column*)>
<!ELEMENT column (#PCDATA)>

<!--
# <repositories> configuration:
#
# In this node repositories to access OpenCms are configured.
-->
<!ELEMENT repositories (repository*)>
<!ELEMENT repository (params?, filter?)>
<!ATTLIST repository name CDATA #REQUIRED>
<!ATTLIST repository class CDATA #REQUIRED>

<!ELEMENT params (param*)>

<!ELEMENT param (#PCDATA)>
<!ATTLIST param name CDATA #REQUIRED><!ATTLIST param name CDATA #REQUIRED>

<!ELEMENT filter (regex*)>
<!ATTLIST filter type CDATA #REQUIRED>

<!--
# <extendedhtmlimport> configuration:
#
# In this node the default values of the extended html import are stored.
-->
<!ELEMENT extendedhtmlimport (
	destination?, 
	input?,
	galleries,
	settings )>

<!--
# the destination directory in the OpenCms VFS.
-->
<!ELEMENT destination (#PCDATA)>

<!--
# the input directory in the "real" file system.
-->
<!ELEMENT input (#PCDATA)>

<!--
# the name of the galleries. 
-->
<!ELEMENT galleries (download?, image?, externallink?)>

<!--
# the download gallery name.
-->
<!ELEMENT download (#PCDATA)>

<!--
# the image gallery name.
-->
<!ELEMENT image (#PCDATA)>

<!--
# the external link gallery name.
-->
<!ELEMENT externallink (#PCDATA)>

<!--
# the settings for the HTML->OpenCms Template converter.
-->
<!ELEMENT settings (
	template,
	element,
	locale,
	encoding,
	pattern,
	overwritefiles,
	keepbrokenlinks )>
<!--
# the template use for all pages.
-->
<!ELEMENT template (#PCDATA)>

<!--
# the element name of the template.
-->
<!ELEMENT element (#PCDATA)>

<!--
# the locale use for content definition.
-->
<!ELEMENT locale (#PCDATA)>

<!--
# the encoding used for all imported input files.
-->
<!ELEMENT encoding (#PCDATA)>

<!--
# the end and start pattern for extracting content.
-->
<!ELEMENT pattern (start?, end?)>
<!ELEMENT start (#PCDATA)>
<!ELEMENT end (#PCDATA)>

<!--
# the overwrite value new resources.
-->
<!ELEMENT overwritefiles (#PCDATA)>

<!--
# should broken links be kept.
-->
<!ELEMENT keepbrokenlinks (#PCDATA)>